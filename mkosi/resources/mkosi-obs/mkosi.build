#!/bin/bash
# SPDX-License-Identifier: LGPL-2.1-or-later
#
# Second stage of build:
# - signed hashes are in cpio archive in SOURCES/ together with artifacts from previous build
# - if there are PCR policies to attach, do so and then prepare the hashes of the UKIs themselves
# - if not, attach the signatures to the UKI(s) with pesign
# - remove shasums of previous artifacts, given we are re-creating them after this step
# - place artifacts from previous builds and signed UKI in output directory

set -e

if [ ! -f /usr/src/packages/SOURCES/hashes.cpio.rsasign.sig ]; then
    exit 0
fi

echo "Signed files to be attached:"
cpio -t </usr/src/packages/SOURCES/hashes.cpio.rsasign.sig
cpio -t </usr/src/packages/SOURCES/hashes.cpio.rsasign
mkdir -p hashes
pushd hashes
cpio -idm </usr/src/packages/SOURCES/hashes.cpio.rsasign.sig
cpio -idm </usr/src/packages/SOURCES/hashes.cpio.rsasign
popd

OUTPUTDIR=/work/src/usr/src/packages/OTHER

# OBS signs a hash without certificate information so it cannot simply be
# attached to the PE binaries, certificate metadata has to be provided separately
# so we need to create a certutil db and import the certificate manually
rm -rf nss-db
mkdir nss-db
nss_db="$PWD/nss-db"
certutil -N -d sql:"$nss_db" --empty-password
certutil -A -d sql:"$nss_db" -n cert -t CT,CT,CT -i /usr/src/packages/SOURCES/_projectcert.crt
openssl x509 -inform PEM -in /usr/src/packages/SOURCES/_projectcert.crt -outform DER -out _projectcert.cer

cp -r /usr/src/packages/SOURCES/"$IMAGE_ID"* /usr/src/packages/SOURCES/*raw* /usr/src/packages/SOURCES/*efi* "$OUTPUTDIR" || true
rm -f "$OUTPUTDIR/hashes.cpio.rsasign*" "$OUTPUTDIR"/*.sha*

# First step: if there are UKI signatures, attach them
while read -r SIG; do
    infile="${SIG%.sig}"
    test -f "/usr/src/packages/SOURCES/$infile" || continue
    sattrs="hashes/ukis/${SIG%.sig}"
    test -s "$sattrs"

    DEST="$OUTPUTDIR/${SIG#*/}"
    DEST="${DEST%%.sig}"

    # ensure the EFI hash matches before and after attaching the signature
    old_hash=$(pesign -n sql:"$nss_db" -h -P -i "/usr/src/packages/SOURCES/$infile" | cut -d' ' -f1)

    pesign -n sql:"$nss_db" --force -c cert -i "/usr/src/packages/SOURCES/$infile" -o "$DEST" -d sha256 -I "$sattrs" -R "hashes/ukis/$SIG"

    new_hash=$(pesign -n sql:"$nss_db" -h -i "$DEST" | cut -d' ' -f1)
    if [ "$old_hash" != "$new_hash" ]; then
        echo "Pesign hash mismatch error: $old_hash $new_hash"
        exit 1
    fi

    rm -f "$(basename "${infile}").sattrs" "$SIG" "$infile"

    # If there is a DDI with an ESP, add the UKI to it
    if [ -f "${DEST%efi}raw" ] || [ -f "${DEST%efi}raw.zst" ] || [ -f "${DEST%efi}img" ] || [ -f "${DEST%efi}img.zst" ]; then
        if [ -f "${DEST%efi}raw.zst" ] || [ -f "${DEST%efi}img.zst" ]; then
            unzstd "${DEST%efi}"raw*.zst
            rm -f "${DEST%efi}"raw*.zst
            recompress=1
        else
            recompress=0
        fi

        offset="$(systemd-repart --json=short "${DEST%efi}"raw* | jq -r '.[] | select(.type == "esp") | .offset')"
        if [ -z "$offset" ] || [ "$offset" = "null" ]; then
            if ((recompress)); then
                zstd --force "${DEST%efi}"raw*
                rm -f "${DEST%efi}raw" "${DEST%efi}raw.img"
            fi
            continue
        fi
        mmd -D s -i "${DEST%efi}"raw*@@"${offset}" ::EFI ::EFI/Linux || true
        mcopy -o -i "${DEST%efi}"raw*@@"${offset}" "$DEST" "::EFI/Linux/$(basename "$DEST")"

        if ((recompress)); then
            zstd --force "${DEST%efi}"raw*
            rm -f "${DEST%efi}raw" "${DEST%efi}raw.img"
        fi
    fi
done < <(find hashes/ukis hashes/kernels -type f \( -name '*efi.sig' -o -name 'vmlinu*.sig' \) -printf '%P\n')
rm -rf "$OUTPUTDIR"/*.sig hashes/ukis

# Second step: if there are signed bootloaders, install them in the ESP
while read -r BOOTLOADER; do
    unsigned="$(basename "${BOOTLOADER%.sig}")"
    signed="$(basename "${BOOTLOADER%.sig}".signed)"
    ddi="${OUTPUTDIR}/${BOOTLOADER%%/*}"
    # remove leading directory from BOOTLOADER
    dest="${BOOTLOADER#*/}"
    dest="${dest%.sig}"

    if [ -f "${ddi}.zst" ]; then
        unzstd "${ddi}.zst"
    fi

    offset="$(systemd-repart --json=short "$ddi" | jq -r '.[] | select(.type == "esp") | .offset')"
    if [ -z "$offset" ] || [ "$offset" = "null" ]; then
        if [ -f "$ddi.zst" ]; then
            rm -f "$ddi"
        fi
        continue
    fi

    rm -f "$unsigned"
    mcopy -i "${ddi}@@${offset}" "::$dest" "$unsigned"

    # ensure the EFI hash matches before and after attaching the signature
    old_hash=$(pesign -n sql:"$nss_db" -h -P -i "$unsigned" | cut -d' ' -f1)

    pesign -n sql:"$nss_db" --force -c cert -i "$unsigned" -o "$signed" -d sha256 -I "hashes/bootloaders/${BOOTLOADER%.sig}" -R "hashes/bootloaders/${BOOTLOADER}"

    new_hash=$(pesign -n sql:"$nss_db" -h -i "$signed" | cut -d' ' -f1)
    if [ "$old_hash" != "$new_hash" ]; then
        echo "Pesign hash mismatch error: $old_hash $new_hash"
        exit 1
    fi

    mcopy -o -i "${ddi}@@${offset}" "$signed" "::$dest"

    if [ -f "${ddi}.zst" ]; then
        zstd --force "$ddi"
        rm -f "$ddi"
    fi
done < <(find "hashes/bootloaders/$(basename "$ddi")/" -type f -iname '*.efi.sig' -printf '%P\n')
rm -rf hashes/bootloaders
rm -rf nss-db

# Third step: if there are PCR policy signatures, rebuild the JSON
# blobs with the attached signatures
while read -r SIG; do
    uki="$OUTPUTDIR/$(basename "$(dirname "${SIG%.sig}")")"
    pcrs="${uki%.efi}.pcrs"
    pol="$(basename "${SIG%.sig}")"

    test -f "${pcrs}"

    jq -c --arg pol "$pol" --arg sig "$(base64 -w0 <"$SIG")" '
        to_entries | map(
            .value |= map(
                if .pol == $pol then
                    .sig = $sig
                else
                    .
                end
            )
        ) | from_entries
    ' "$pcrs" >"${pcrs}.new"
    mv "${pcrs}.new" "$pcrs"
    cp "$pcrs" "${pcrs}.sig"

    rm -f "$SIG"
done < <(find hashes/pcrs -type f -name '*.sig')
rm -rf hashes/pcrs

mkdir -p "$nss_db"
certutil -N -d sql:"$nss_db" --empty-password

# Fourth step: now that the JSON blob is rebuilt, merge it in the UKI
while read -r PCRS; do
    uki="${PCRS%.pcrs.sig}.efi"
    ukify --json=short --pcrsig "@$PCRS" --join-pcrsig "$uki" --output "$uki.attached" build
    mv "$uki.attached" "$uki"
    mkdir -p hashes/ukis
    pesign --force -n sql:"$nss_db" -i "$uki" -E "hashes/ukis/$(basename "$uki")"
done < <(find "$OUTPUTDIR" -type f -name '*.pcrs.sig')
rm -f "$OUTPUTDIR"/*.pcrs*

# Fifth step: finalize any DDI by attaching the verity roothash signatures
while read -r SIG; do
    test -f "/usr/src/packages/SOURCES/$(basename "${SIG%roothash.sig}repart.tar")" || continue

    PATH=/usr/lib/systemd/:$PATH systemd-keyutil --help | grep -q 'pkcs7' || break
    PATH=/usr/lib/systemd/:$PATH systemd-keyutil --certificate /usr/src/packages/SOURCES/_projectcert.crt --output "${SIG%sig}p7s" --signature "$SIG" pkcs7

    mkdir -p mkosi.repart
    tar xf "/usr/src/packages/SOURCES/$(basename "${SIG%roothash.sig}repart.tar")" -C mkosi.repart
    rm -f "$OUTPUTDIR/$(basename "${SIG%roothash.sig}repart.tar")"
    if [ -f "$OUTPUTDIR/$(basename "${SIG%roothash.sig}raw.zst")" ] || [ -f "$OUTPUTDIR/$(basename "${SIG%roothash.sig}img.zst")" ]; then
        recompress=1
        unzstd "$OUTPUTDIR/$(basename "${SIG%roothash.sig}")"raw*.zst
        rm -f "$OUTPUTDIR/$(basename "${SIG%roothash.sig}")"raw*.zst
    else
        recompress=0
    fi

    ARGS=(
        --join-signature "$(cat "${SIG%.sig}"):${SIG%sig}p7s" \
        --certificate /usr/src/packages/SOURCES/_projectcert.crt \
        --definitions mkosi.repart \
        --dry-run=no \
        "$OUTPUTDIR/$(basename "${SIG%roothash.sig}")"raw*
    )

    # sd-repart might be configured to create labels based on os-release fields. Due to the
    # mkosi sandbox we cannot use --image, so we need to provide the os-release file manually
    # via --root
    if [ -f "/usr/src/packages/SOURCES/$(basename "${SIG%roothash.sig}osrelease")" ]; then
        mkdir -p mkosi.repart/usr/lib
        cp "/usr/src/packages/SOURCES/$(basename "${SIG%roothash.sig}osrelease")" mkosi.repart/usr/lib/os-release
        ARGS+=(--root="$PWD"/mkosi.repart)
    fi
    systemd-repart "${ARGS[@]}"
    rm -rf mkosi.repart

    if ((recompress)); then
        zstd --force "$OUTPUTDIR/$(basename "${SIG%roothash.sig}")"raw*
        rm -f "$OUTPUTDIR/$(basename "${SIG%roothash.sig}raw")" "$OUTPUTDIR/$(basename "${SIG%roothash.sig}raw.img")"
    fi

    # Do not publish the roothash here, as importctl and friends will mistake it as the roothash of the .raw image
    rm -f "$OUTPUTDIR/$(basename "${SIG%.sig}")"
done < <(find hashes/roothashes -type f -name '*.sig')
rm -rf hashes/roothashes

# Sixth step: prepare EFI authvars for self-enrollment
# as implemented by https://github.com/openSUSE/pesign-obs-integration/blob/master/pesign-repackage.spec.in#L162
while read -r SIG; do
    test -x /usr/lib/rpm/pesign/kernel-sign-file || break
    f="${SIG%.sig}"
    /usr/lib/rpm/pesign/kernel-sign-file -N -P -d -C _projectcert.cer -i pkcs7 -s "$SIG" sha256 _projectcert.cer "$f"
    fbase="${f##*/}"
    fbase="${fbase%.auth}"
    fbase="${fbase%%-*}"
    perl -0777 -npe 's/\A(?:[\040-\176]\0)+.{18}\0\0.{14}\0\0//s' < "$f" > "$f.orig"
    sign-efi-sig-list -t "$(date -d "@${SOURCE_DATE_EPOCH:-0}" "+%Y-%m-%d %H:%M:%S")" -i "$f.p7sd" "$fbase" "$f.orig" "$f.tmp"
    mv "$f.tmp" "$f"
    rm -f "$f.p7s" "$f.p7sd" "$f.orig"
done < <(find hashes/authvars -type f -name '*.auth.sig')
declare -a AUTHVARS
mapfile -t AUTHVARS < <(find hashes/authvars -type f -name "*.auth")
if (( ${#AUTHVARS[@]} > 0 )); then
    for ddi in "$OUTPUTDIR"/*.raw*; do
        test -f "$ddi" || continue

        if [[ $ddi == *.zst ]]; then
            unzstd "${ddi}"
            recompress=1
        else
            recompress=0
        fi

        offset="$(systemd-repart --json=short "${ddi%.zst}" | jq -r '.[] | select(.type == "esp") | .offset')"
        if [ -z "$offset" ] || [ "$offset" = "null" ]; then
            if [[ $ddi == *.zst ]]; then
                rm -f "${ddi%.zst}"
            fi
            continue
        fi

        mmd -D s -i "${ddi%.zst}@@${offset}" ::loader ::loader/keys ::loader/keys/auto || true
        for authvar in "${AUTHVARS[@]}"; do
            test -f "$authvar" || continue
            mcopy -o -i "${ddi%.zst}@@${offset}" "$authvar" "::loader/keys/auto/$(basename "$authvar")"
        done

        if ((recompress)); then
            zstd --force "${ddi%.zst}"
            rm -f "${ddi%.zst}"
        fi
    done
fi
rm -rf hashes/authvars

# Final step: if there are any hashes staged, prepare for the next stage
rmdir --ignore-fail-on-non-empty hashes
if [ -d hashes ]; then
    pushd hashes
    find . -type f | cpio -H newc -o >"$OUTPUTDIR/hashes.cpio.rsasign"
    popd
    cp /usr/src/packages/SOURCES/mkosi.conf "$OUTPUTDIR"
    echo "Staging the following files for signing:"
    cpio -t <"$OUTPUTDIR/hashes.cpio.rsasign"
fi

rm -rf hashes "$nss_db"
