name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  unit-test:
    runs-on: ubuntu-22.04
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true
    steps:
    - uses: actions/checkout@v3

    - name: Install
      run: |
        python3 -m pip install pytest mypy types-cryptography isort pyflakes
        npm install -g pyright

    - name: Check that imports are sorted
      run: python3 -m isort --verbose --check-only mkosi/

    - name: Run pyflakes
      run: python3 -m pyflakes mkosi/ tests/

    - name: Check that tabs are not used in code
      run: sh -c '! git grep -P "\\t" "*.py"'

    - name: Type Checking (mypy)
      run: python3 -m mypy mkosi/ tests/

    - name: Type Checking (pyright)
      run: pyright .

    - name: Unit Tests
      run: python3 -m pytest -sv tests

    - name: Test execution from current working directory
      run: python3 -m mkosi -h

    - name: Test execution from current working directory (sudo call)
      run: sudo python3 -m mkosi -h

    - name: Test user installation
      run: |
        python3 -m pip install --user .
        $HOME/.local/bin/mkosi -h
        python3 -m pip uninstall --yes mkosi

    - name: Test editable user installation
      run: |
        python3 -m pip install --user --no-use-pep517 --editable .
        $HOME/.local/bin/mkosi -h
        python3 -m pip uninstall --yes mkosi

    - name: Test venv installation
      run: |
        python3 -m venv testvenv
        testvenv/bin/python3 -m pip install .
        testvenv/bin/mkosi -h

    - name: Test venv installation (sudo call)
      run: |
        sudo testvenv/bin/mkosi -h

    - name: Test system installation
      run: |
        sudo python3 -m pip install .
        sudo mkosi -h
        sudo python3 -m pip uninstall --yes mkosi

    - name: Test zipapp creation
      run: |
        ./tools/generate-zipapp.sh
        ./builddir/mkosi -h

    - name: Test shell scripts
      run: |
        sudo apt-get update && sudo apt-get install --no-install-recommends shellcheck
        bash -c 'shopt -s globstar; shellcheck **/*.sh'

  integration-test:
    runs-on: ubuntu-22.04
    needs: unit-test
    concurrency:
      group: ${{ github.workflow }}-${{ matrix.distro }}-${{ matrix.format }}-${{ matrix.prebuilt-initrd }}-${{ github.ref }}
      cancel-in-progress: true
    defaults:
      run:
        working-directory: ./.github
    strategy:
      fail-fast: false
      matrix:
        distro:
          - arch
          - centos
          - debian
          - ubuntu
          - fedora
          - rocky
          - alma
          - gentoo
          - opensuse
        format:
          - directory
          - tar
          - cpio
          - disk
        prebuilt-initrd:
          - no
          - yes
        exclude:
          - distro: gentoo
            prebuilt-initrd: yes

    steps:
    - uses: actions/checkout@v3
    - uses: ./

    - name: Install dependencies
      run: sudo apt-get update && sudo apt-get install --no-install-recommends python3-pexpect python3-pytest

    - name: Install Gentoo dependencies (portage)
      if: matrix.distro == 'gentoo'
      run: |
        sudo tee /usr/lib/sysusers.d/acct-user-portage.conf > /dev/null <<- EOF
        # /usr/lib/sysusers.d/portage.conf
        u portage - "Portage system user" /var/lib/portage/home -
        EOF
        sudo systemd-sysusers --no-pager

        sudo install --owner=portage --group=portage --mode=0755 --directory /var/db/repos
        sudo install --owner=portage --group=portage --mode=0755 --directory /etc/portage/repos.conf
        sudo install --owner=portage --group=portage --mode=0755 --directory /var/cache/binpkgs
        sudo tee /etc/portage/repos.conf/eselect-repo.conf > /dev/null <<- EOF
        [gentoo]
        location = /var/db/repos/gentoo
        sync-type = git
        sync-uri = https://anongit.gentoo.org/git/repo/gentoo.git
        EOF

        git clone https://anongit.gentoo.org/git/proj/portage.git --depth=1
        cd portage
        tee setup.cfg > /dev/null <<- EOF
        [build_ext]
        portage-ext-modules=true
        EOF

        sudo python setup.py install

        sudo ln -s --relative /var/db/repos/gentoo/profiles/default/linux/amd64/17.1/no-multilib/systemd/merged-usr /etc/portage/make.profile

    # Do a manual install so we have the latest changes from the pull request available.
    - name: Install
      run: sudo python3 -m pip install ..

    - name: Build ${{ matrix.distro }} initrd
      if: matrix.prebuilt-initrd == 'yes'
      # Run the build in .github/workflows/ so we don't pick up any of the configuration files in .github/
      run: python3 -m mkosi -d ${{ matrix.distro }} -t cpio -p systemd -p udev -p kmod --make-initrd -o $PWD/initrd build
      working-directory: ./.github/workflows

    - name: Configure ${{ matrix.distro }}/${{ matrix.format }}
      run: |
        tee mkosi.conf.d/00-ci.conf <<- EOF
        [Distribution]
        Distribution=${{ matrix.distro }}

        [Output]
        Format=${{ matrix.format }}
        EOF

    - name: Configure ${{ matrix.distro }}/${{ matrix.format }} initrd
      if: matrix.prebuilt-initrd == 'yes'
      run: |
        tee mkosi.conf.d/00-initrd.conf <<- EOF
        [Distribution]
        Initrds=workflows/initrd.zst
        EOF

    - name: Resolve Arch geo mirror location
      if: matrix.distro == 'arch'
      run: curl -I geo.mirror.pkgbuild.com

    - name: Build ${{ matrix.distro }}/${{ matrix.format }}
      run: python3 -m mkosi build

    # systemd-resolved is enabled by default in Arch/Debian/Ubuntu (systemd default preset) but fails to
    # start in a systemd-nspawn container with --private-users so we mask it out here to avoid CI failures.
    # FIXME: Remove when Arch/Debian/Ubuntu ship systemd v253
    - name: Mask systemd-resolved
      if: matrix.format == 'directory'
      run: sudo systemctl --root image mask systemd-resolved

    - name: Boot ${{ matrix.distro }}/${{ matrix.format }} systemd-nspawn
      if: matrix.format == 'disk' || matrix.format == 'directory'
      run: sudo python3 -m mkosi boot

    - name: Check ${{ matrix.distro }}/${{ matrix.format }} systemd-nspawn
      if: matrix.format == 'disk' || matrix.format == 'directory'
      run: sudo python3 -m mkosi shell bash -c "[[ -e /testok ]] || { cat /failed-services; exit 1; }"

    - name: Boot ${{ matrix.distro }}/${{ matrix.format }} UEFI
      if: matrix.format == 'disk'
      run: timeout -k 30 10m python3 -m mkosi qemu

    - name: Check ${{ matrix.distro }}/${{ matrix.format }} UEFI
      if: matrix.format == 'disk' || matrix.format == 'directory'
      run: sudo python3 -m mkosi shell bash -c "[[ -e /testok ]] || { cat /failed-services; exit 1; }"
