name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  ci:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        distro:
          - arch
          - centos
          - centos_epel
          - clear
          - debian
          - ubuntu
          - fedora
          - openmandriva
        format:
          - directory
          - tar
          - gpt_ext4
          - gpt_xfs
          - gpt_btrfs
          - gpt_squashfs
          - plain_squashfs

    steps:
    - uses: actions/checkout@v2

    - name: Update
      run: sudo apt-get update

    - name: Install dependencies
      run: sudo apt-get --assume-yes --no-install-recommends install
            asciidoc
            check
            debootstrap
            e2fsprogs
            libarchive-dev
            libcppunit-dev
            libcurl4-openssl-dev
            libjson-c-dev
            libgpgme-dev
            libmagic-dev
            librpm-dev
            libsmartcols-dev
            libyaml-dev
            libzstd-dev
            meson
            ninja-build
            python3-gpg
            python3-rpm
            python3-sphinx
            squashfs-tools
            swig
            systemd-container
            xfsprogs
            xsltproc

    - name: Install dependencies (Arch Linux)
      if: matrix.distro == 'arch'
      run: |
        wget https://sources.archlinux.org/other/pacman/pacman-$PACMAN_VERSION.tar.gz
        tar xf pacman-$PACMAN_VERSION.tar.gz

        meson \
          -Dbuildtype=release \
          -Ddoc=disabled \
          -Dscriptlet-shell=/usr/bin/bash \
          -Dldconfig=/usr/bin/ldconfig \
          build/pacman \
          pacman-$PACMAN_VERSION
        sudo meson install -C build/pacman

        wget https://sources.archlinux.org/other/archlinux-keyring/archlinux-keyring-$ARCHLINUX_KEYRING_VERSION.tar.gz
        tar xf archlinux-keyring-$ARCHLINUX_KEYRING_VERSION.tar.gz

        sudo make -C archlinux-keyring-$ARCHLINUX_KEYRING_VERSION PREFIX=/usr install
        sudo pacman-key --init
        sudo pacman-key --populate archlinux

        wget https://git.archlinux.org/arch-install-scripts.git/snapshot/arch-install-scripts-$ARCH_INSTALL_SCRIPTS_VERSION.tar.gz
        tar xf arch-install-scripts-$ARCH_INSTALL_SCRIPTS_VERSION.tar.gz

        sudo make -C arch-install-scripts-$ARCH_INSTALL_SCRIPTS_VERSION PREFIX=/usr install
      env:
        PACMAN_VERSION: "5.2.2"
        ARCHLINUX_KEYRING_VERSION: "20200622"
        ARCH_INSTALL_SCRIPTS_VERSION: "23"

    - name: Install dependencies (CentOS Linux)
      if: startsWith(matrix.distro, 'centos') || matrix.distro == 'fedora' || matrix.distro == 'openmandriva'
      run: |
        wget https://github.com/rpm-software-management/libcomps/archive/libcomps-$LIBCOMPS_VERSION.tar.gz
        tar xf libcomps-$LIBCOMPS_VERSION.tar.gz

        cmake \
            -S libcomps-libcomps-$LIBCOMPS_VERSION/libcomps \
            -B build/libcomps \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=/usr \
            -DCMAKE_INSTALL_LIBDIR=lib/x86_64-linux-gnu \
            -DPYTHON_DESIRED=3 \
            -DENABLE_TESTS=OFF \
            -DENABLE_DOCS=OFF \
            -DBUILD_SHARED_LIBS=ON \
            -Wno-dev
        cmake --build build/libcomps
        sudo cmake --install build/libcomps

        wget https://github.com/rpm-software-management/librepo/archive/$LIBREPO_VERSION.tar.gz
        tar xf $LIBREPO_VERSION.tar.gz

        cmake \
            -S librepo-$LIBREPO_VERSION \
            -B build/librepo \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=/usr \
            -DCMAKE_INSTALL_LIBDIR=lib/x86_64-linux-gnu \
            -DENABLE_TESTS=OFF \
            -DENABLE_DOCS=OFF \
            -DWITH_ZCHUNK=OFF \
            -DBUILD_SHARED_LIBS=ON
        cmake --build build/librepo
        sudo cmake --install build/librepo

        wget https://github.com/fedora-modularity/libmodulemd/archive/libmodulemd-$LIBMODULEMD_VERSION.tar.gz
        tar xf libmodulemd-$LIBMODULEMD_VERSION.tar.gz

        meson \
            --prefix /usr \
            -Dbuildtype=release \
            -Dlibdir=lib/x86_64-linux-gnu \
            -Ddeveloper_build=false \
            -Dwith_docs=false \
            -Dwith_manpages=disabled \
            -Dskip_introspection=true \
            -Dgobject_overrides_dir_py3=override \
            build/libmodulemd \
            libmodulemd-libmodulemd-$LIBMODULEMD_VERSION
        sudo meson install -C build/libmodulemd

        wget https://github.com/openSUSE/libsolv/archive/$LIBSOLV_VERSION.tar.gz
        tar xf $LIBSOLV_VERSION.tar.gz

        cmake \
            -S libsolv-$LIBSOLV_VERSION \
            -B build/libsolv \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=/usr \
            -DCMAKE_INSTALL_LIBDIR=lib/x86_64-linux-gnu \
            -DENABLE_RPMDB=ON \
            -DENABLE_RPMPKG=ON \
            -DENABLE_PUBKEY=ON \
            -DENABLE_RPMDB_BYRPMHEADER=ON \
            -DENABLE_RPMDB_LIBRPM=ON \
            -DENABLE_RPMPKG_LIBRPM=ON \
            -DENABLE_RPMMD=ON \
            -DENABLE_COMPS=ON \
            -DENABLE_MDKREPO=ON \
            -DENABLE_COMPLEX_DEPS=ON \
            -DENABLE_APPDATA=ON \
            -DENABLE_LZMA_COMPRESSION=ON \
            -DENABLE_BZIP2_COMPRESSION=ON \
            -DENABLE_ZSTD_COMPRESSION=ON
        cmake --build build/libsolv
        sudo cmake --install build/libsolv

        wget https://github.com/rpm-software-management/libdnf/archive/$LIBDNF_VERSION.tar.gz
        tar xf $LIBDNF_VERSION.tar.gz

        cp /usr/share/cmake/Modules/FindLibSolv.cmake libdnf-$LIBDNF_VERSION/cmake/modules

        cmake \
            -S libdnf-$LIBDNF_VERSION \
            -B build/libdnf \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=/usr \
            -DCMAKE_INSTALL_LIBDIR=lib/x86_64-linux-gnu \
            -DWITH_GTKDOC=OFF \
            -DWITH_HTML=OFF \
            -DWITH_MAN=OFF \
            -DWITH_ZCHUNK=OFF \
            -DBUILD_SHARED_LIBS=ON \
            -DCMAKE_CXX_FLAGS="-pthread" \
            -DPYTHON_DESIRED=3
        cmake --build build/libdnf
        sudo cmake --install build/libdnf

        wget https://github.com/rpm-software-management/dnf/archive/$DNF_VERSION.tar.gz
        tar xf $DNF_VERSION.tar.gz

        cmake \
            -S dnf-$DNF_VERSION \
            -B build/dnf \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=/usr \
            -DPYTHON_DESIRED=3 \
            -DWITH_MAN=0
        cmake --build build/dnf
        sudo cmake --install build/dnf

        sudo ln -s /usr/bin/dnf-3 /usr/bin/dnf
      env:
        CMAKE_GENERATOR: Ninja
        LIBCOMPS_VERSION: "0.1.15"
        LIBREPO_VERSION: "1.12.0"
        LIBMODULEMD_VERSION: "2.9.4"
        LIBSOLV_VERSION: "0.7.14"
        LIBDNF_VERSION: "0.48.0"
        DNF_VERSION: "4.2.23"

    - name: Install swupd-extract (Clear Linux)
      if: matrix.distro == 'clear'
      run: |
        go get -u github.com/clearlinux/mixer-tools/swupd-extract
        sudo ln -s ~/go/bin/swupd-extract /usr/bin/swupd-extract

    - name: Build ${{ matrix.distro }}/${{ matrix.format }}
      run: sudo ./mkosi
            --debug run
            --distribution ${{ matrix.distro }}
            --format ${{ matrix.format }}
