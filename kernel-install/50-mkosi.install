#!/usr/bin/env python3
# SPDX-License-Identifier: LGPL-2.1+

import argparse
import logging
import os
import shutil
import tempfile
from pathlib import Path
from typing import NamedTuple, Optional

from mkosi import identify_cpu
from mkosi.archive import make_cpio
from mkosi.config import OutputFormat, __version__
from mkosi.log import die, log_setup
from mkosi.run import find_binary, run, uncaught_exception_handler
from mkosi.types import PathString
from mkosi.util import umask


class Context(NamedTuple):
    command: str
    kernel_version: str
    entry_dir: Path
    kernel_image: Path
    initrds: list[Path]
    staging_area: Path
    layout: str
    image_type: str
    initrd_generator: Optional[str]
    uki_generator: Optional[str]
    verbose: bool


def we_are_wanted(context: Context) -> bool:
    return context.uki_generator == "mkosi" or context.initrd_generator in ("mkosi", "mkosi-initrd")


def mandatory_variable(name: str) -> str:
    try:
        return os.environ[name]
    except KeyError:
        die(f"${name} must be set in the environment")


def build_microcode_initrd(output: Path) -> Optional[Path]:
    vendor, ucode = identify_cpu(Path("/"))

    if vendor is None:
        logging.warning("Unable to determine the vendor of your CPU, not adding microcode")
        return None

    if ucode is None:
        logging.warning("Unable to find microcode for your CPU in /usr/lib/firmware, not adding microcode")
        return None

    with tempfile.TemporaryDirectory() as tmp:
        root = Path(tmp) / "initrd-microcode-root"
        destdir = root / "kernel/x86/microcode"

        with umask(~0o755):
            destdir.mkdir(parents=True, exist_ok=True)

            with (destdir / f"{vendor}.bin").open("wb") as f:
                f.write(ucode.read_bytes())

        make_cpio(root, output)

    return output


@uncaught_exception_handler()
def main() -> None:
    log_setup()

    parser = argparse.ArgumentParser(
        description='kernel-install plugin to build initrds or Unified Kernel Images using mkosi',
        allow_abbrev=False,
        usage='50-mkosi.install COMMAND KERNEL_VERSION ENTRY_DIR KERNEL_IMAGE INITRD…',
    )

    parser.add_argument("command",
                        metavar="COMMAND",
                        help="The action to perform. Only 'add' is supported.")
    parser.add_argument("kernel_version",
                        metavar="KERNEL_VERSION",
                        help="Kernel version string")
    parser.add_argument("entry_dir",
                        metavar="ENTRY_DIR",
                        type=Path,
                        nargs="?",
                        help="Type#1 entry directory (ignored)")
    parser.add_argument("kernel_image",
                        metavar="KERNEL_IMAGE",
                        type=Path,
                        nargs="?",
                        help="Kernel image")
    parser.add_argument("initrds",
                        metavar="INITRD…",
                        type=Path,
                        nargs="*",
                        help="Initrd files")
    parser.add_argument("--version",
                        action="version",
                        version=f"mkosi {__version__}")

    context = Context(
        **vars(parser.parse_args()),
        staging_area=Path(mandatory_variable("KERNEL_INSTALL_STAGING_AREA")),
        layout=mandatory_variable("KERNEL_INSTALL_LAYOUT"),
        image_type=mandatory_variable("KERNEL_INSTALL_IMAGE_TYPE"),
        initrd_generator=os.getenv("KERNEL_INSTALL_INITRD_GENERATOR"),
        uki_generator=os.getenv("KERNEL_INSTALL_UKI_GENERATOR"),
        verbose=int(os.getenv("KERNEL_INSTALL_VERBOSE", 0)) > 0,
    )

    if context.command != "add" or not we_are_wanted(context):
        return

    # If kernel-install was passed a UKI, there's no need to build anything ourselves.
    if context.image_type == "uki":
        return

    # If the initrd was provided on the kernel command line, we shouldn't generate our own.
    if context.layout != "uki" and context.initrds:
        return

    format = OutputFormat.uki if context.layout == "uki" else OutputFormat.cpio
    output = "initrd" if format == OutputFormat.cpio else "uki"

    cmdline: list[PathString] = [
        "mkosi",
        "--directory", "",
        "--format", str(format),
        "--output", output,
        "--workspace-dir=/var/tmp",
        "--package-cache-dir=/var",
        "--cache-only=metadata",
        "--output-dir", context.staging_area,
        "--extra-tree", f"/usr/lib/modules/{context.kernel_version}:/usr/lib/modules/{context.kernel_version}",
        "--extra-tree=/usr/lib/firmware:/usr/lib/firmware",
        "--kernel-modules-exclude=.*",
        "--kernel-modules-include=host",
        "--include=mkosi-initrd",
    ]

    if context.verbose:
        cmdline += ["--debug"]

    for d in ("/usr/lib/mkosi-initrd", "/etc/mkosi-initrd"):
        if Path(d).exists():
            cmdline += ["--include", d]

    with tempfile.TemporaryDirectory() as d:
        # Make sure we don't use any of mkosi's default repositories.
        for p in (
            "yum.repos.d/mkosi.repo",
            "apt/sources.list",
            "zypp/repos.d/mkosi.repo",
            "pacman.conf",
        ):
            (Path(d) / "etc" / p).parent.mkdir(parents=True, exist_ok=True)
            (Path(d) / "etc" / p).touch()

        # Copy in the host's package manager configuration.
        for p in (
            "dnf",
            "yum.repos.d/",
            "apt",
            "zypp",
            "pacman.conf",
            "pacman.d/",
        ):
            if not (Path("/etc") / p).exists():
                continue

            (Path(d) / "etc" / p).parent.mkdir(parents=True, exist_ok=True)
            if (Path("/etc") / p).resolve().is_file():
                shutil.copy2(Path("/etc") / p, Path(d) / "etc" / p)
            else:
                shutil.copytree(Path("/etc") / p, Path(d) / "etc" / p,
                                ignore=shutil.ignore_patterns("S.*"), dirs_exist_ok=True)

        cmdline += ["--package-manager-tree", d]

        logging.info(f"Building {output}")

        # Prefer dnf as dnf5 has not yet officially replaced it and there's a much bigger chance that there will be a
        # populated dnf cache directory.
        run(cmdline, env={"MKOSI_DNF": dnf.name} if (dnf := find_binary("dnf", "dnf5")) else {})

    (context.staging_area / output).unlink()

    if format == OutputFormat.cpio:
        shutil.move(next(context.staging_area.glob("initrd*.cpio*")), context.staging_area / "initrd")
        build_microcode_initrd(context.staging_area / "microcode")
    else:
        (context.staging_area / f"{output}.vmlinuz").unlink()
        (context.staging_area / f"{output}.initrd").unlink()


if __name__ == '__main__':
    main()
